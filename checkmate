#!/usr/bin/env python3

from argparse import ArgumentParser
from enum import Enum
from typing import Dict, Any
import json
import logging
import sys

from solving import WeakImmuneStrategySolver, CollusionResilienceStrategySolver, PracticalityStrategySolver
from trees import Input


class SecurityProperty(Enum):
    WEAK_IMMUNITY = 'WI'
    COLLUSION_RESILIENCE = 'CR'
    PRACTICALITY = 'P'


PROPERTY_TO_JSON_KEY = {SecurityProperty.WEAK_IMMUNITY.value: 'weak_immunity',
                        SecurityProperty.COLLUSION_RESILIENCE.value: 'collusion_resilience',
                        SecurityProperty.PRACTICALITY.value: 'practicality'}

if __name__ == '__main__':
    # set signal handler to OS default so that console interrupts behave as expected
    # this is usually "terminate reasonably rapidly" for SIGINT
    # Python's default is "wait around for any native code, then consider KeyboardInterrupt on a good day"
    from signal import SIGINT, SIG_DFL, signal
    signal(SIGINT, SIG_DFL)

    security_properties = [member.value for member in SecurityProperty]

    logging.basicConfig(
        level=logging.INFO,
        format='[%(levelname)s] %(message)s'
    )
    parser = ArgumentParser(
        description="check game-theoretic security properties of off-chain protocols"
    )
    parser.add_argument(
        'PATH',
        type=str,
        help="path to input file"
    )
    parser.add_argument(
        '--analyze-properties',
        nargs='+',
        choices=security_properties,
        default=security_properties,
        help='specify analyzed security properties',
    )
    parser.add_argument(
        '--output-strategies',
        action='store_true',
        help="print strategies as JSON"
    )
    parser.add_argument(
        '--generate-preconditions',
        action='store_true',
        help="generate preconditions if a case fails"
    )
    parser.add_argument(
        '--generate-counterexamples',
        action='store_true',
        help="generate counterexamples if a case fails"
    )
    args = parser.parse_args()
    analyzed_properties = args.analyze_properties
    output = args.output_strategies
    generate_preconditions = args.generate_preconditions
    generate_counterexamples = args.generate_counterexamples
    if generate_preconditions and generate_counterexamples:
        raise Exception("Generating preconditions and counterexamples at the same time is not supported.")
    checked_input = Input(args.PATH)
    logging.info(
        f"input OK, checking {len(checked_input.honest_histories)} histories..."
    )

    strategies = []
    for honest_history in checked_input.honest_histories:
        result: Dict[str, Any] = {"history": honest_history}
        logging.info(f"history {honest_history}")

        if SecurityProperty.WEAK_IMMUNITY.value in analyzed_properties:
            logging.info("checking weak immunity")
            result["weak_immunity"] = WeakImmuneStrategySolver(
                checked_input,
                honest_history,
                generate_preconditions,
                generate_counterexamples
            ).solve()

        if SecurityProperty.COLLUSION_RESILIENCE.value in analyzed_properties:
            logging.info("checking collusion resilience")
            result["collusion_resilience"] = CollusionResilienceStrategySolver(
                checked_input,
                honest_history,
                generate_preconditions,
                generate_counterexamples
            ).solve()

        if SecurityProperty.PRACTICALITY.value in analyzed_properties:
            logging.info("checking practicality")
            result["practicality"] = PracticalityStrategySolver(
                checked_input,
                honest_history,
                generate_preconditions,
                generate_counterexamples
            ).solve()

        strategies.append(result)

    json_keys = [PROPERTY_TO_JSON_KEY[name] for name in analyzed_properties]
    # nice summary of the check
    logging.info("####### Summary: ######")
    for hh in strategies:
        logging.info(f"Honest history {hh['history']}")
        for pr in json_keys:
            strats = hh[pr]["strategies"]
            gen_precond = hh[pr]["generated_preconditions"]
            if len(strats) == 0:
                logging.info(f"-- doesn't have {pr.replace('_', ' ')}")
            elif len(strats) == 1:
                if len(gen_precond) == 0:
                    logging.info(
                        f"-- has {pr.replace('_', ' ')} (one strategy)"
                    )
                else:
                    logging.info(
                        f"-- has {pr.replace('_', ' ')} if {gen_precond} (one strategy)"
                    )
            else:
                if len(gen_precond) == 0:
                    logging.info(
                        f"-- has {pr.replace('_', ' ')} with different strategies for cases"
                    )
                else:
                    logging.info(
                        f"-- has {pr.replace('_', ' ')} if {gen_precond} with different strategies for cases"
                    )
                for i, c in enumerate(strats):
                    logging.info(f"---- case {i}: {c['case']}")

    if output:
        for hh in strategies:
            for pr in json_keys:
                gen_precond = hh[pr]["generated_preconditions"]
                hh[pr]["generated_preconditions"] = [
                    str(precond) for precond in gen_precond
                ]
        json.dump({"strategies": strategies}, fp=sys.stdout, indent=4)
